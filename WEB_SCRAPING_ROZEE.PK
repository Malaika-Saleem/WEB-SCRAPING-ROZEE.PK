{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "34ae72ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing the necessary libraries\n",
    "\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.chrome.options import Options\n",
    "from selenium.webdriver.common.keys import Keys\n",
    "from selenium.webdriver.common.by import By\n",
    "from selenium.common.exceptions import NoSuchElementException\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38617144",
   "metadata": {},
   "outputs": [],
   "source": [
    "#code for rozee.pk\n",
    "from selenium import webdriver\n",
    "from selenium.webdriver.chrome.service import Service as ChromeService\n",
    "from webdriver_manager.chrome import ChromeDriverManager\n",
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))\n",
    "url = 'https://www.rozee.pk/'\n",
    "driver.get(url)\n",
    "search_bar = driver.find_element(By.XPATH, '/html/body/div[2]/div[3]/div[2]/form/div[1]/input')\n",
    "search_bar.send_keys('AI/ML' + Keys.RETURN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3069238",
   "metadata": {},
   "outputs": [],
   "source": [
    "#initialize lists in the dictionary to store different job details\n",
    "data=dict()\n",
    "data['job_titles']=[]   \n",
    "data['company']=[]  \n",
    "data['location']=[]  \n",
    "data['gender_preferences']=[]   \n",
    "data['min_education']=[]    \n",
    "data['experience']=[]  \n",
    "\n",
    "\n",
    "#find the main grid of job cards on the webpage\n",
    "ad_grid = driver.find_element(By.XPATH, '/html/body/div[3]/div/div[2]/div[2]')\n",
    "#find all job cards in the grid\n",
    "ad_cards = ad_grid.find_elements(By.CLASS_NAME, 'job')\n",
    "#initialize a counter for tracking job cards\n",
    "count=0\n",
    "#loop through each job card\n",
    "for i in ad_cards:\n",
    "    #click on the current job card\n",
    "    ad_cards[count].click()\n",
    "    #switch to the new tab\n",
    "    driver.switch_to.window(driver.window_handles[1])\n",
    "    time.sleep(3)\n",
    "    #in new tab\n",
    "    try:\n",
    "        #in the new tab try to find company name if not found append unknown\n",
    "        data['company'].append(driver.find_element(By.CLASS_NAME, \"cname.im1.font18.mr5.text-dark\").text)\n",
    "    except(NoSuchElementException,StaleElementReferenceException) as e :\n",
    "        try:\n",
    "            data['company'].append(driver.find_element(By.CLASS_NAME, \"h3.mgnT10.mgnB0.color-custome\").text)\n",
    "        except(NoSuchElementException,StaleElementReferenceException) as e :\n",
    "            data['company'].append(\"Unknown\")\n",
    "            \n",
    "            \n",
    "    try:\n",
    "        #in the new tab try to find job title if not found append unknown\n",
    "        data['job_titles'].append(driver.find_element(By.CLASS_NAME, \"jtitle.font24.text-dark\").text)\n",
    "    except(NoSuchElementException,StaleElementReferenceException) as e :\n",
    "        try:\n",
    "            data['job_titles'].append(driver.find_element(By.CLASS_NAME, \"hd5.h2.mgn0.color-custome\").text)\n",
    "        except(NoSuchElementException,StaleElementReferenceException) as e :\n",
    "            data['job_titles'].append(\"Unknown\")\n",
    "            \n",
    "            \n",
    "    try:\n",
    "        #in the new tab try to find location if not found append unknown\n",
    "        data['location'].append(driver.find_element(By.CLASS_NAME, \"lh1.cname.im2.font18.text-dark.d-flex.align-items-center\").text)\n",
    "    except(NoSuchElementException,StaleElementReferenceException) as e :\n",
    "        try:\n",
    "            data['location'].append(driver.find_element(By.CLASS_NAME, \"h3.mgnT10.mgnB0.color-custome\").text)\n",
    "        except(NoSuchElementException,StaleElementReferenceException) as e :\n",
    "            data['location'].append(\"Unknown\") \n",
    "         \n",
    "        #scroll down in the new tab\n",
    "    driver.execute_script(\"window.scrollTo(0, 800);\")\n",
    "    time.sleep(2) \n",
    "    \n",
    "    try:\n",
    "        #try to find job details  gender preferences minimum education and experience\n",
    "        job_desc=driver.find_element(By.CLASS_NAME, \"jblk.col-pl-0\")\n",
    "        details = job_desc.find_elements(By.CLASS_NAME, 'row')\n",
    "        \n",
    "        data['gender_preferences'].append(driver.find_element(By.XPATH, '/html/body/section/div/div[3]/div[1]/div[2]/div[2]/div/div/div/div[1]/div[3]/div/div[7]/div[2]').text)\n",
    "        data['min_education'].append(driver.find_element(By.XPATH, \"/html/body/section/div/div[3]/div[1]/div[2]/div[2]/div/div/div/div[1]/div[3]/div/div[8]/div[2]\").text)\n",
    "        data['experience'].append(driver.find_element(By.XPATH, \"/html/body/section/div/div[3]/div[1]/div[2]/div[2]/div/div/div/div[1]/div[3]/div/div[10]/div[2]\").text)\n",
    "    except(NoSuchElementException,StaleElementReferenceException) as e :\n",
    "        try:\n",
    "            #if not found scroll down again and try to find job details\n",
    "            driver.execute_script(\"window.scrollTo(0, 800);\")\n",
    "            time.sleep(2)  \n",
    "            job_desc=driver.find_element(By.CLASS_NAME, \"jblk.col-pl-0\")\n",
    "            data['gender_preferences'].append(driver.find_element(By.XPATH, '/html/body/section/div/div[3]/div[1]/div[2]/div[2]/div/div/div/div[1]/div[3]/div/div[7]/div[2]').text)\n",
    "            data['min_education'].append(driver.find_element(By.XPATH, \"/html/body/section/div/div[3]/div[1]/div[2]/div[2]/div/div/div/div[1]/div[3]/div/div[8]/div[2]\").text)\n",
    "            data['experience'].append(driver.find_element(By.XPATH, \"/html/body/section/div/div[3]/div[1]/div[2]/div[2]/div/div/div/div[1]/div[3]/div/div[10]/div[2]\").text)\n",
    "    \n",
    "        except(NoSuchElementException,StaleElementReferenceException) as e :\n",
    "            #if still not found set default values\n",
    "            data['gender_preferences'].append('No Preference')\n",
    "            data['min_education'].append('None')\n",
    "            data['experience'].append('None')\n",
    "        \n",
    "        \n",
    "    time.sleep(2)\n",
    "    #close the new tab\n",
    "    driver.close()\n",
    "    #switch back to the original tab\n",
    "    driver.switch_to.window(driver.window_handles[0])\n",
    "    #increment the counter by 1\n",
    "    count+=1\n",
    "    #convert to dataframe and save to csv\n",
    "    df = pd.DataFrame(data)\n",
    "    df.to_csv('Q1_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ba476da",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"Q1_data.csv\")\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a67da80",
   "metadata": {},
   "outputs": [],
   "source": [
    "location=input('Enter loction of job: ')\n",
    "education=input('Enteryour education level: ')\n",
    "experience=input('Enter your experience: ')\n",
    "\n",
    "df2=df[(df['location']==location)&(df['experience']==experience)&(df['min_education']==education)]\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "27f6876b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "310de8e5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f8deb69",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "284ca765",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
